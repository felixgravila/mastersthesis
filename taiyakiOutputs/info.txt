taiyaki

what to have in folder:
	o_escherichia_1 (fast5 files, generated by multi_to_single_fast5) (see the readme there)
	escherichia_ref.fa (reference genome, extracted by my getReference script) (see the readme there)
	
to generate the o_escherichia_1 folder you need to first run my copyBacteria script which copies all umibins from one bacteria into another folder (escherichia_1 in this case), then use multi_to_single_fast5 to convert the multi-fast5 files we received into single-fast5. In my experiments so far I only kept the first bin (folder 0 after conversion) in order to speed prepare_mapped_reads up. 
	
source /mnt/nvme/gitstuff/DNA/taiyaki/venv/bin/activate (source python that has taiyaki)
generate_per_read_params.py --recursive o_escherichia_1 --output per_read_params.tsv

The main idea is as follows:

Usually the MinION generates fast5 files containing the raw signal. One fast5 file per read. Following the taiyaki example, you use a basecaller to generate a DNA sequence that fairly accurately represents the raw signal. They use guppy since it's very fast, but you can use any other basecaller, for example flappie, if the data amount isn't large and you don't want to mess about with CUDA and docker. Having the approximate sequence, you use minimap and samtools to align the basecalled DNA to a reference. This means you then know where in the genome your DNA is located. get_refs_from_sam uses the alignment to extract the proper DNA sequence from the reference so that you know exactly what DNA should be represented by the raw signal. Finally you run prepare_mapped_reads which uses the above mentioned info to map the real DNA to the signal.

Since we kindly received the basecalled sequence directly in the fast5 files themselves, I use my createFasta script to extract them, as if a basecaller had been used. Example 2 and 3 show that the two work the same way. You therefore don't need to use any basecaller unless you insist.

now you have options to do what I did, as enumerated below. Since this I have found the taiyaki walkthrough that explains the process better. Amongst changes, the model being used should probably be the one they use. The first example is just to show how simple it can be to get some output, but the result is almost certainly bad. Mapping is needed. 

* just from fasta given by BIO guys
    python createFasta.py o_escherichia_1 (my createFasta script) (see the readme there)
    prepare_mapped_reads.py o_escherichia_1/0 per_read_params.tsv output_justfromfasta.hdf5 $taiyaki_path/models/mGru_flipflop_remapping_model_r9_DNA.checkpoint o_escherichia_1.fasta --overwrite
    
* get from ref based on aligned fasta given by BIO guys
    python createFasta.py o_escherichia_1 (my createFasta script)
    minimap2 -ax map-ont escherichia_ref.fa o_escherichia_1.fasta > minimapped.sam
    get_refs_from_sam.py escherichia_ref.fa minimapped.sam --output refsfromsam.fasta
    prepare_mapped_reads.py o_escherichia_1/0 per_read_params.tsv output_createfasta.hdf5 $taiyaki_path/models/mGru_flipflop_remapping_model_r9_DNA.checkpoint refsfromsam.fasta --overwrite
    
* basecall then align to ref and get fasta
    flappie o_escherichia_1/0 > basecalled.fa
    minimap2 -ax map-ont escherichia_ref.fa basecalled.fa > minimapped.sam
    get_refs_from_sam.py escherichia_ref.fa minimapped.sam --output refsfromsam.fasta
    prepare_mapped_reads.py o_escherichia_1/0 per_read_params.tsv output_flappiealigned.hdf5 $taiyaki_path/models/mGru_flipflop_remapping_model_r9_DNA.checkpoint refsfromsam.fasta --overwrite
    
